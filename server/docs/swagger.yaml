openapi: 3.0.0
info:
  title: Gather & Grub REST API
  description: MongoDB ExpressJS NodeJS REST API
  version: 1.0.0
servers:
  - url: http://localhost:3001/api/
    description: Localhost development server
tags:
  - name: recipes
    description: Create, Read, Update and Delete recipes.
  - name: user
    description: Operations on the user.
components:
  # Reusable schemas/data models
  schemas: # Referenced by "#/components/schemas/<entryName>"
    User: # Referenced by "#/components/schemas/User"
      type: object
      properties:
        full_name:
          type: string
        email:
          type: string
        password:
          type: string
        joined:
          type: string
          description: Date user joined Gather & Grub

    Recipe: # Referenced by "#/components/schemas/Recipe"
      type: object
      properties:
        recipe_name:
          type: string
          description: Name of the recipe
        description:
          type: string
          description: Description of the recipe
        directions:
          type: string
          description: This is the instructions for how to create the specific recipe
        servings:
          type: number
          description: Number value for number of servings
        prep_time:
          type: number
          description: Number value for how long it takes to prep in minutes
        cook_time:
          type: number
          description: Number value for how long it takes to cook in minutes
        author:
          type: string
          description: Object ID for the user that saved/created the recipe
        source:
          type: string
          description: Value is always potluck from the database
          example: potluck
        ingredients:
          type: array
          description: 'Array of Ingredient objects'
          items:
            type: object
            properties:
              ingredient_name:
                type: string
                description: Name of the ingredient
              measurement:
                type: string
                description: Measurement of the ingredient
              amount:
                type: string
                description: Amount of the ingredient's measurement
      required:
        - recipe_name
        - description
        - directions
        - servings
        - prep_time
        - cook_time
        - author
        - ingredients

    Error: # Can be referenced as "#/components/schemas/Error"
      type: object
      properties:
        error:
          type: string
        message:
          type: string
  # Reusable path, query, header and cookie parameters
  parameters: # Referenced by "#/components/parameters/<entryName>"
  # Security scheme definitions
  securitySchemes: # Referenced by "#/components/securitySchemes/<entryName>"
  # Reusable request bodies
  requestBodies: # Referenced by "#/components/requestBodies/<entryName>"
    Recipe: # Referenced by "#/components/requestBodies/Recipe"
      $ref: "#/components/schemas/Recipe"

    User:
      type: object
      properties:
        full_name:
          type: string
          example: full_name
        email:
          type: string
          example: first_last@example.com
        password:
          type: string
          example: Testing123
  # Reusable responses, such as 401 Unauthorized or 400 Bad Request
  responses: # Referenced by "#/components/responses/<entryName>"

    RecipeResponse:
      description: Successfully found/updated/created the recipe
      content:
        application/json:
          schema:
            $ref: "#/components/examples/ReturnRecipeExample"

    404NotFound: # Can be referenced as '#/components/responses/404NotFound'
      description: The specified resource was not found.

    ImageResponse: # Can be referenced as '#/components/responses/ImageResponse'
      description: An image.
      content:
        image/*:
          schema:
            type: string
            format: binary

    GenericError: # Can be referenced as '#/components/responses/GenericError'
      description: An error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  # Reusable response headers
  headers: # Referenced by "#/components/headers/<entryName>"
  # Reusable Examples
  examples: # Referenced by "#/components/examples/<entryName>"
    ReturnRecipeExample: # Referenced by "#/components/examples/ReturnRecipeExample"
      example:
        "_id": "638f5a2ab664e686d05211ac"
        "recipe_name": "Best Recipe"
        "description": "Good Food"
        "ingredients":
          -
            "ingredient_name": "Olive Oil"
            "measurement": "tablespoon"
            "amount": "1"
            "_id": "638f5a2ab664e686d05211ad"
        "directions": "Cook it"
        "servings": 8
        "prep_time": 5
        "cook_time": 20
        "author": "638cf0342ff1e8964f2952e4"
        "source": "potluck"
        "tags": []
        "created_date": "2022-12-06T15:05:14.617Z"
        "comments": []
        "__v": 0
  # Reusable links
  links: # Referenced by "#/components/links/<entryName>"
  # Reusable callbacks
  callbacks: # Referenced by "#/components/callbacks/<entryName>"

paths:

  /recipes:
    get:
      tags:
        - recipes
      summary: Get a list(array) of all Recipes in the database.
      description: Retrieve an array of Recipe Objects.
      responses:
        '200':
          description: A list (array) of Recipes.
          content:
            application/json:
              schema:
                type: array
                $ref: "#/components/examples/ReturnRecipeExample"
    post:
      tags:
        - recipes
      summary: Create a new Recipe when you provide the correct data.
      description: Create a new Recipe using required data.
      requestBody:
        description: Should be a recipe object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipe:
                  type: object
                  $ref: "#/components/requestBodies/Recipe"

      responses:
        "201":
          $ref: "#/components/responses/RecipeResponse"

        "406":
          description: Failure due to schema mismatch.
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: Error name "ValidationError"
                    example: ValidationError
                  message:
                    type: string
                    description: Message that explains what is missing.
                    example: "recipes validation failed: description: Recipe description required."
        "409":
          description: Failure due to name existing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message "Recipe already exists with that name."
                    example: Recipe already exists with that name.

  /user/register:
    post:
      tags:
        - users
      summary: Create a new user.
      description: When provided the required object will create a new user
      requestBody:
        description: A user request object
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/requestBodies/User"
      responses:
        "201":
          description: Successfully created requested user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Created user for email: test@example.com"
                  userId:
                    type: string
                    example: 638d2f39fea819d7bcb80937
        "400":
          description: Failure due to empty request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Please provide a user object"
        "409":
          description: Failure due to email already existing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: UserExists
                  message:
                    type: string
                    example: "User already exists with email: test@example.com"
        "422":
          description: Failure due to missing fields in request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: MissingFields
                  missingFields:
                    type: array
                    example: ["full_name"]

  /user/login:
    post:
      tags:
        - users
      summary: Login with a user.
      description: When provided the required object will login a user that returns a JSONWebToken.
      requestBody:
        description: email and password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: test@example.com
                password:
                  type: string
                  example: test123
      responses:
        "200":
          description: Successfully logged in requested user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: 638d2f39fea819d7bcb80937
                  email:
                    type: string
                    example: test@example.com
                  password:
                    type: string
                    description: Encrypted string
                    example: $2a$10$OQGEcarHGLdtw8X5iseLPui7LJkNNYZYGQGsfPx6BXN5bk/wTV3.C
                  full_name:
                    type: string
                    example: Test
                  joined:
                    type: string
                    example: 2022-12-07T21:44:50.148Z
                  __v:
                    type: integer
                    example: 0
                  token:
                    type: string
                    description: JSON Web Token
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjM5M2EwOTkwNTA4MjBlNGYyZGQ4MzczIiwiZW1haWwiOiJ0ZXN0QGV4YW1wbGUuY29tIiwiaWF0IjoxNjcwNjE5Mjg5LCJleHAiOjE2NzA2MjY0ODl9.JMlmcLncAhRDfVHkHQUSBIGfBerqelG-KrYyASh6q9I
        "400":
          description: Failure due to empty request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Provide email and password."
        "401":
          description: Failure due to invalid credentials.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid Credentials"